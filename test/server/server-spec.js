/**
 * Copyright 2021 F5 Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

/* eslint-disable no-unused-expressions */

const chai = require('chai');
const chaiHttp = require('chai-http');
const server = require('../../src/server')();

const expect = chai.expect;
chai.use(chaiHttp);

describe('Automation Config Converter API', function apiTest() {
    this.timeout(1000);

    describe('GET /index.html', () => {
        it('it should GET the static page', () => chai.request(server)
            .get('/')
            .then((res) => {
                expect(res).to.have.status(200);
                expect(res).to.be.html;
                expect(res).to.have.header('x-powered-by', 'Express');
                expect(res.text).to.include('<title>Automation Config Converter</title>');
            }));
    });

    describe('POST /converter', () => {
        it('should POST a UCS to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.httpProfile.class).to.equal('HTTP_Profile');
            }));

        it('should POST a conf to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.httpProfile2.class).to.equal('HTTP_Profile');
            }));

        it('should POST both a conf and UCS', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.Common.Shared.httpProfile.class).to.equal('HTTP_Profile');
                expect(res.body.Common.Shared.httpProfile2.class).to.equal('HTTP_Profile');
            }));

        it('should add the Controls object if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('controls', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.controls.class).to.equal('Controls');
            }));

        it('should add the Verbose outputs if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('verbose', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(typeof res.body.logs).to.equal('object');
                expect(typeof res.body.config).to.equal('object');
                expect(typeof res.body.output).to.equal('object');
                expect(typeof res.body.recognized).to.equal('object');
                expect(res.body.recognized['ltm profile http /Common/httpProfile']).to.exist;
            }));

        it('should allow multiple uploads', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(Object.keys(res.body.Common.Shared)).to.include('httpProfile');
                expect(Object.keys(res.body.Common.Shared)).to.include('httpProfile2');
            }));

        it('should work with neither a UCS nor CONF file', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.label).to.equal('Converted Declaration');
            }));
    });

    describe('404 handler', () => {
        it('should test an invalid endpoint', () => chai.request(server)
            .get('/notfound')
            .then((res) => {
                expect(res).to.have.status(404);
            }));
    });

    describe('400 handler', () => {
        it('should return 400 for bad UCS conversion', () => chai.request(server)
            .post('/converter')
            .attach('ucs', Buffer.from('{'), 'server.conf')
            .then((res) => {
                expect(res).to.have.status(400);
            }));
    });
});
