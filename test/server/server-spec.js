/**
 * Copyright 2022 F5 Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

/* eslint-disable no-unused-expressions */

/* Note: There is a workaround in these tests relating to output files,
   specifically the log file.  chaiHttp appears to keep the server up
   between tests contrary to documentation.  So, the logger is also
   not destroyed.  On top of this, the winston logger queues operations
   and trying to force output doesn't behave as you might expect. This
   results in the log file potentially lagging the check for the log
   file.  The workaround is to run file-based tests at the start of
   this file with the log file check deferred until the last test.
   This is less than optimal, but it appears to resolve the timing issue.
*/

const assert = require('assert');
const chai = require('chai');
const chaiHttp = require('chai-http');
const fs = require('fs');
const server = require('../../src/server')();

const expect = chai.expect;
chai.use(chaiHttp);

describe('Automation Config Converter API', function apiTest() {
    this.timeout(3000);

    after(() => {
        if (fs.existsSync('logfile')) {
            fs.unlinkSync('logfile');
        }
        if (fs.existsSync('output.json')) {
            fs.unlinkSync('output.json');
        }
        if (fs.existsSync('supported.json')) {
            fs.unlinkSync('supported.json');
        }
        if (fs.existsSync('unsupported.json')) {
            fs.unlinkSync('unsupported.json');
        }
    });

    describe('Output file handler', () => {
        it('should queue creation of log file if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('log', './logfile')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.testVirtual2.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.testVirtual2.virtualPort).to.equal(201);
            }));

        it('should create output file from conf if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('output', './output.json')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.testVirtual2.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.testVirtual2.virtualPort).to.equal(201);
                assert(fs.existsSync('output.json'));
            }));
    });

    describe('GET /index.html', () => {
        it('it should GET the static page', () => chai.request(server)
            .get('/')
            .then((res) => {
                expect(res).to.have.status(200);
                expect(res).to.be.html;
                expect(res).to.have.header('x-powered-by', 'Express');
                expect(res.text).to.include('<title>Automation Config Converter</title>');
            }));
    });

    describe('POST /converter', () => {
        it('should POST a UCS to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.httpProfile.class).to.equal('HTTP_Profile');
            }));

        it('should POST a conf to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.httpProfile2.class).to.equal('HTTP_Profile');
            }));

        it('should POST both a conf and UCS', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.Common.Shared.httpProfile.class).to.equal('HTTP_Profile');
                expect(res.body.Common.Shared.httpProfile2.class).to.equal('HTTP_Profile');
            }));

        it('should POST a DO conf to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('declarativeOnboarding', 'true')
            .field('next', 'true')
            .attach('conf', 'test/server/server_base2.conf', 'server_base2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.Common.internal.class).to.equal('VLAN');
                expect(res.body.Common.SelfIp_internalSelf.class).to.equal('SelfIp');
            }));

        it('should POST AS3 Next conf to be converted', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('next', 'true')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.testVirtual2.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.testVirtual2.virtualPort).to.equal(201);
            }));

        it('should POST AS3 Next conf to be converted with extension', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('nextNotConverted', 'true')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.testVirtual2.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.testVirtual2.virtualPort).to.equal(201);
            }));

        it('should add the Controls object if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('controls', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.controls.class).to.equal('Controls');
            }));

        it('should add the Verbose outputs if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('verbose', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(typeof res.body.logs).to.equal('object');
                expect(typeof res.body.config).to.equal('object');
                expect(typeof res.body.output).to.equal('object');
                expect(typeof res.body.as3Recognized).to.equal('object');
                expect(typeof res.body.as3Converted).to.equal('object');
                expect(typeof res.body.as3NotConverted).to.equal('object');
                expect(res.body.as3Recognized['ltm profile http /Common/httpProfile']).to.exist;
            }));

        it('should allow multiple uploads', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .attach('ucs', 'test/basic_install.ucs', 'basic_install.ucs')
            .attach('conf', 'test/server/server.conf', 'server.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(Object.keys(res.body.Common.Shared)).to.include('httpProfile');
                expect(Object.keys(res.body.Common.Shared)).to.include('httpProfile2');
            }));

        it('should work with neither a UCS nor CONF file', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res.body.label).to.equal('Converted Declaration');
            }));
    });

    describe('Filter by virtual server name', () => {
        it('should filter a virtual server from conf if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('vsName', '/Common/testVirtual2')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.serviceMain.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.serviceMain.virtualPort).to.equal(201);
            }));
    });

    describe('Target virtual server to tenant/application', () => {
        it('should target a virtual server from conf if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('vsName', '/Common/testVirtual2')
            .field('tenantTarget', 'testTenant')
            .field('applicationTarget', 'testApplication')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.testTenant.testApplication.serviceMain.class).to.equal('Service_TCP');
                expect(res.body.testTenant.testApplication.serviceMain.virtualPort).to.equal(201);
            }));
    });

    describe('Include default values in output', () => {
        it('should include default values from conf if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('showExtended', 'true')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.httpProfile2.trustXFF).to.equal(false);
                expect(res.body.Common.Shared.httpProfile2.proxyType).to.equal('reverse');
            }));
    });

    describe('Disable post-processing with safe mode', () => {
        it('should not target/filter in safe mode from conf if requested', () => chai.request(server)
            .post('/converter')
            .field('disableAnalytics', 'true')
            .field('safeMode', 'true')
            .field('vsName', '/AS3_Tenant/AS3_Application/testAppVirtual')
            .field('tenantTarget', 'testTenant')
            .field('applicationTarget', 'testApplication')
            .attach('conf', 'test/server/server2.conf', 'server2.conf')
            .then((res) => {
                expect(res).to.have.status(201);
                expect(res).to.be.json;
                expect(res.body.label).to.equal('Converted Declaration');
                expect(res.body.remark).to.equal('Generated by Automation Config Converter');
                expect(res.body.Common.Shared.testVirtual2.class).to.equal('Service_TCP');
                expect(res.body.Common.Shared.testVirtual2.virtualPort).to.equal(201);
            }));
    });

    describe('404 handler', () => {
        it('should test an invalid endpoint', () => chai.request(server)
            .get('/notfound')
            .then((res) => {
                expect(res).to.have.status(404);
            }));
    });

    describe('400 handler', () => {
        it('should return 400 for bad UCS conversion', () => chai.request(server)
            .post('/converter')
            .attach('ucs', Buffer.from('{'), 'server.conf')
            .then((res) => {
                expect(res).to.have.status(400);
            }));
    });

    describe('Output file handler (wrap up)', () => {
        it('should write log file that was queued', async () => {
            assert(fs.existsSync('logfile'));
        });
    });
});
